/* Revolver-DS; just Lock, Load & Ship your headless DS! */
@layer reset, lock, load, ship, preset;


@import url('../css/rds--reset.css') layer(reset);
@import url('lock.css') layer(lock);
@import url('load.css') layer(load);
@import url('ship.css') layer(ship);


/* Why an ANONYMOUS layer? It works the same as a named layer, except without a name
you can't add anything to it later. This is considered a healthy seperation of concern
before any authored & class-based cascading kicks in. */
@layer {
p, h1, h2, h3 {
    max-width: clamp(46ch, 50vw, 68ch);
    margin-inline-start: clamp(2vw, 2.5vw, 3vw);
}

h1, h2, h3 {
    margin-block-end: clamp(-0.35vw, -0.6vw, -1vw);
    white-space: nowrap;
}

p, h2, h3, ul, ol {
    font-family: "IBM Plex Mono", Arial, monospace;
}

p {
    line-height: 3.6ex;
    font-weight: 400;
}

b {
    font-weight: 900;
}

i {
    font-style: italic;
}

a, u {
    text-underline-offset: calc(1ex / 4);
}

ul > *::before, ol > *::before {
    content: "\1f44D";
    margin-inline-end: 0.75ch;
    drop-shadow: 0.5ch 0.5ch 0.75ch rgba(0, 0, 0, 0.65);
}
ul, ol {
list-style: none;
line-height: 3.5ex;
}

li {
    max-width: clamp(46ch, 50vw, 68ch);
}
pre code {
    background-color: #eee;
    border: 1px solid #999;
    display: block;
    padding: 20px;
    font-size: 1.1em;
  }

h1 {
    font-family: "Major Mono Display", Helvetica, monospace;
    margin-block-start: min(3vw, 5vw);
    margin-block-end: min(2vw, 4vw);
    font-weight: 400;
}

div {
    display: flex;
    flex-direction: column;
    align-items: center;
    background-color: var(--uc__background);
    width: 100%;
    padding-block-end: min(5vw, 10vw);
    padding-block-start: min(1vw, 3vw);
}

body {
    overflow-x: hidden;
    font-weight: 500;
}

:where(.rds > *:not(.rds--freeze)) {
    color: var(--uc__text);
}
}

/* **** CHEAT SHEET ******* */
/* COPYRIGHT NOTICE & LICENSE AGREEMENT NOTICE

.: B.O.U.~M :. tokensets copyright protected in addition to the Creative Commons 4.0 CC-BA-NC-SA license agreement that protects creatives in the field of digital. A copy can be found here: https://followgu.us/license

The addition is simple; BOUM-tokens are tokens that are attached at the end of your design tokens. These tokens are copyright protected so your design system work created from it automatically gets legal protection, because the BOUM-tokens you use are protected by this very legal document. 

You in turn have a license or not, which is free to get from the website https://followgu.us/boum.

And if you're using it for education or a CodePen, it's totally not neccesary to get a license unless you intend to publish the entire design token convention. 
Accreditation (https://justgu.us) with a notification of the license (https://followgu.us/boum) is enough if you don't need to be licensed, but still want to do the right thing.
*/
/*  .: HOW-TO:  Read & Write BOUM-tokens :.

BOUM uses a relative center; the BASE. 
Need a higher value?
Just go On Base from your relative base. 
Need less? 
Just godown Under Base from whwere you are. 
Untill you hit the MAX on either side after three.

It uses ROMAN SEMANTICAL NOTATION to give name to design tokens on- and
under the base, using their first letters o' and u' like the
roman numbers I, II and III use letters to spell them.

// Roman Semantical Notation: X, I, II, III, M

I'm not re√Ønventing the wheel here, I'm just using the roman numeric system
as the primary analogy for how BOUM-tokens are semantically generated. The default 
way to write out tokens is BEM-like, using --(B)__(E)--(M) as a writing-pattern.

// WRITING PATTERN: --[BASE]__{ELEMENT}--MODIFIER, for example;
Utility Color Primary, modified On On base; --uc__primary--oob
Color Primar, modified Under base --cp__ub

Please note that the concept of base and element is therefor interchangable. Some tokens don't
need more than a Base + Modifier, which makes the BOUM-modifier the element. The
writing-pattern of the --higher and __lower dashes doesn't swap places to keep consistency.

//EXAMPLE: 

MAX On Base : __mob;
On On On Base : __ooob;
On On Base: __oob;
On Base: __ob;
Base: ;
Under Base: __ub;
Under Under Base: __uub;
Under Under Under Base: __uuub;
MAX Under Base: __mub;

which would look semantically like this on an abbreviated color primary;
    --cp__mob: ;
    --cp__ooob: ;
    --cp__oob: ;
    --cp__ob: ;
    --cp: ;
    --cp__ub: ;
    --cp__uub: ;
    --cp__uuub: ;
    --cp__mub: ;

So in short; need more value? On base. Need less value? Under base. BOUM
works fully semantical systematically, and that is what makes it unique.

A minimal and effective way to speak about design tokens as 
semantical rules, not numbers, as a universal design language in code.

BOUM is a Axiomatic and Semaforic IP to be exact, but that's
just literature & legal slang versus keeping it layman's; 

BOUM keeps it simple; just start with three tokens and let your choices 
grow (no more than three(+1)) ON or UNDER the BASE from there on!

 // START with three...
--token__mob: ;
--token: ;
--token__mub: ;

// THEN you add some

--token__mob: ;
--token__oob: ;
--token__ob: ;
--token: ;
--token__ub: ;
--token__uub: ;
--token__mub: ;

And then... you need a value "in between" ...

{{{{  How to write MODIFIERS }}}}

Say you need a color-stop in your palette, between __ob and __oob.
How would you name that token? And where would you place it?

    --cp__mob: ;
    --cp__ooob: ;
    --cp__oob: ;    << {{ new color value? }}
    --cp__ob: ;    << {{ new color value? }}
    --cp: ;

Let's assume we know the color is "just in between", than we
could apply the rule "closest to the base" to adopt the name
from, with a modifier prefixed: '_m__'.

In this case, On Base (__ob) would be the closest value to
mimic as a name, putting it right there where you want it; 
modified in between '__ob' and '__oob', the new color-name is:

MODIFIED On Base: --_m__cp__ob, so it sticks it's butt out screaming
"HELLOOOO! I'm HERE!", without compromizing the standard semantics when
you type and select from a list of autocompletes. 

The added _m__ makes it dive straight to the bottom of the list, ignored mostly as it should be.

A modifier looks semantically like this in a matrix of a color;
    --cp__mob: ;
    --cp__ooob: ;
    --cp__oob: ;
    --_m__cp__ob: ;
    --cp__ob: ;
    --co: ;
    
    Exceptions can be made, but only one per token unless you
    want something like this to hit your approval inbox;
    
    --_mmm__cp--ooob
    --_mm__cp--ooob
    --_m__cp--ooob
    --_mm__cp--oob
    --_mm__cp--ob
    --_mmm__cp

Even still, that looks acceptably readable however, it's just
not clear what the signal versus the noise is anymore since modifiers
became the norm, not the exception.

Design language is a huge part of Revolver-DS, if not everything.
That's why RDS keeps principles simple and sticks to these basics;

0. No Docs, Strictly Comments & Principles
1. No numbers, Just semantics
2. No more Than 3 On or Under, plus 1 modifier per token
3. Always comment abbreviations & exceptions
4. Always comment ...
5. Keep The Basics Fresh!

/* *** END OF CHEAT SHEET *** */
